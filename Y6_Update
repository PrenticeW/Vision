/* @OnlyCurrentDoc */

// ------------------------------------
// Constants
// ------------------------------------

const HEADER_END_ROW = 9;
const TEMPLATE_ROW = 1;
const START_COPY_ROW = 9;
const DROPDOWN_COLUMN = 4;
const CHECKBOX_COLUMN = 1;
const COLUMN_5 = 5;
const RECURRING_COLUMN = 6; // Column F for recurring checkbox
const PROJECTS_SHEET = 'Year 5: Projects';
const STAGING_SHEET = 'Year 5: Staging';
const DROPDOWN_TARGET_COLUMN = 2;
const DROPDOWN_SOURCE_START_ROW = 265;
const DROPDOWN_SOURCE_COLUMN_START = 1;
const DROPDOWN_SOURCE_COLUMN_END = 2;
const START_COLUMN_PASTE_CHECK = 9;
const TEMPLATE_ROWS = [2, 3, 4];
const NUM_CELLS_TO_COLOR = 7;
const NUM_COLUMNS_HIDE = 7;
const MAX_ROWS_TO_PASTE = 4;
const COLUMN_OFFSET = 8;
const STATUS_COLUMN = DROPDOWN_COLUMN; // Column D
const HOURS_COLUMN = 8; // <-- WRITE numeric totals to column H
const HEADER_COLOR_COLUMN = 1; // Column A used to identify project headers
const HEADER_COLOR = '#d5a6bd'; // Background color for project headers
const CACHE_EXPIRATION = 3600; // seconds

// ---- Week / Archive identifiers (used by manual WoW tool) ----
const WEEK_HEADER_PREFIX = 'Year';      // e.g. "Year 5, Week 1"
const ARCHIVE_ANCHOR_TEXT = 'Archive';  // single anchor row label in col A

// ---- Manual WoW color palette ----
const WOW_GREEN = '#1a7f37';
const WOW_RED   = '#d93025';

// ------------------------------------
// UI Menu
// ------------------------------------

function onOpen() {
  const ui = SpreadsheetApp.getUi();

  ui.createMenu('Vision')
    .addSubMenu(
      ui.createMenu('âž• Insert')
        .addItem('Insert Tasks', 'insertTasks')
        .addSeparator()
        .addItem('Collect Times', 'captureSelectedRange')
        .addItem('Insert Time Total', 'addTotalFunction')
        .addSeparator()
        .addItem('Insert Light Header', 'addLightArchiveHeader')
        .addItem('Insert Dark Header', 'addDarkArchiveHeader')
        .addSeparator()
        .addItem('Insert New Project', 'insertNewProject')
    )
    .addSeparator()
    .addSubMenu(
      ui.createMenu('âœ± Archive')
        .addItem('Remove Tasks From Archive', 'deleteRows')
        .addItem('Remove Tasks from Planner', 'deleteRowsDoneOrAbandoned')
    )
    .addSeparator()
    .addSubMenu(
      ui.createMenu('âž– Hide')
        .addItem('Hide Week', 'hideSelectedWeek')
        .addItem('Unhide Week', 'unhidePreviousWeek')
        .addSeparator()
        .addItem('Group Tasks', 'groupSelectedRows')
        .addItem('Ungroup Tasks', 'ungroupSelectedRows')
    )
    .addSeparator()
    .addSubMenu(
      ui.createMenu('ðŸŽ¨ WoW Coloring')
        .addItem('Color Selected G vs Previous Week', 'colorSelectedTotalsWoW')
        .addItem('Clear Font Color (Selected G)', 'clearSelectedFontColor')
    )
    .addToUi();
}

// ------------------------------------
// Formatting
// ------------------------------------

function dropdown(e) {
  let range = e.range;
  let col = range.getColumn();
  let row = range.getRow();
  let val = range.getValue();
  let source = e.source.getActiveSheet();

  if (source.getName() == PROJECTS_SHEET && val != '' && col == DROPDOWN_TARGET_COLUMN) {
    let ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(PROJECTS_SHEET);
    let dropdownSheet = ss.getSheetByName(STAGING_SHEET);
    let data = dropdownSheet
      .getRange(
        DROPDOWN_SOURCE_START_ROW,
        DROPDOWN_SOURCE_COLUMN_START,
        dropdownSheet.getLastRow() - 1,
        DROPDOWN_SOURCE_COLUMN_END
      )
      .getValues();

    let dropdowns = [];
    for (let i = 0; i < data.length; i++) {
      let thisrow = data[i];
      if (thisrow[0] == val) dropdowns.push(thisrow[1]);
    }

    let rule = SpreadsheetApp.newDataValidation()
      .requireValueInList(dropdowns)
      .setAllowInvalid(false)
      .build();

    sheet.getRange(row, col + 1).setDataValidation(rule);
  }
}

function onPaste(event) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var sheetName = sheet.getName();

  const TEMPLATE_ROW = 1;
  const HEADER_END_ROW = 9;
  const START_COLUMN_PASTE_CHECK = 9;

  var allowedSheets = [PROJECTS_SHEET];
  if (allowedSheets.indexOf(sheetName) === -1) return;

  var startRow = event.range.getRow();
  var startColumn = event.range.getColumn();
  var numRows = event.range.getNumRows();
  var numColumns = event.range.getNumColumns();

  if (startRow <= HEADER_END_ROW || startColumn < START_COLUMN_PASTE_CHECK) return;

  for (var rowOffset = 0; rowOffset < numRows; rowOffset++) {
    for (var colOffset = 0; colOffset < numColumns; colOffset++) {
      var currentRow = startRow + rowOffset;
      var currentColumn = startColumn + colOffset;
      var editRange = sheet.getRange(currentRow, currentColumn, 1, 1);

      if (currentRow > HEADER_END_ROW) {
        var cellValidation = editRange.getDataValidation();
        if (cellValidation && cellValidation.getCriteriaType() === SpreadsheetApp.DataValidationCriteria.CHECKBOX) {
          continue;
        }
        var templateCell = sheet.getRange(TEMPLATE_ROW, currentColumn, 1, 1);
        templateCell.copyTo(editRange, { formatOnly: true });
      }
    }
  }
}

function onEdit(e) {
  const sheet = e.source.getActiveSheet();
  if (sheet.getName() !== PROJECTS_SHEET) return;

  const range = e.range;
  const startRow = range.getRow();
  const numRows = range.getNumRows();
  const startColumn = range.getColumn();
  const numColumns = range.getNumColumns();
  const rowsToUpdate = new Set();

  if (startRow <= HEADER_END_ROW || numRows > MAX_ROWS_TO_PASTE) return;

  // Run column 5 logic only when a single cell in column 5 is edited
  if (numRows === 1 && numColumns === 1 && startColumn === COLUMN_5) {
    updateDropdownBasedOnColumn5(sheet, startRow);
    return;
  }

  // Iterate over each edited cell
  for (let i = 0; i < numRows; i++) {
    const currentRow = startRow + i;
    for (let j = 0; j < numColumns; j++) {
      const currentColumn = startColumn + j;

      // Maintain existing dropdown/checkbox logic
      if (currentColumn === DROPDOWN_COLUMN || currentColumn === CHECKBOX_COLUMN) {
        updateCheckboxBasedOnDropdown(sheet, currentRow);
      }
      if (currentColumn >= START_COLUMN_PASTE_CHECK) {
        updateDropdownBasedOnValues(sheet, currentRow);
      }

      // Track rows where status or hours changed
      if (currentColumn === STATUS_COLUMN || currentColumn === HOURS_COLUMN) {
        rowsToUpdate.add(currentRow);
      }
    }
  }

  rowsToUpdate.forEach((r) => updateProjectTotal(sheet, r));
}

function updateCheckboxBasedOnDropdown(sheet, row) {
  var dropdownCell = sheet.getRange(row, DROPDOWN_COLUMN);
  var validation = dropdownCell.getDataValidation();
  if (validation == null) return;

  var dropdownValue = sheet.getRange(row, DROPDOWN_COLUMN).getValue();
  var checkboxCell = sheet.getRange(row, CHECKBOX_COLUMN);

  if (dropdownValue !== "Done") {
    checkboxCell.setValue(false);
  }
}

function updateDropdownBasedOnValues(sheet, row) {
  var dropdownCell = sheet.getRange(row, DROPDOWN_COLUMN);
  var validation = dropdownCell.getDataValidation();
  if (validation == null) return;

  var rowRange = sheet.getRange(row, START_COLUMN_PASTE_CHECK, 1, sheet.getLastColumn() - START_COLUMN_PASTE_CHECK + 1);
  var values = rowRange.getValues()[0];

  var hasValueGreaterThanZero = values.some(function (value) {
    return value > 0;
  });

  if (dropdownCell.getValue() === "Done") {
    if (!hasValueGreaterThanZero) {
      dropdownCell.setValue('Not Scheduled');
      updateCheckboxBasedOnDropdown(sheet, row);
    }
  } else {
    if (hasValueGreaterThanZero) {
      dropdownCell.setValue('Scheduled');
    } else {
      dropdownCell.setValue('Not Scheduled');
      updateCheckboxBasedOnDropdown(sheet, row);
    }
  }
}

function updateDropdownBasedOnColumn5(sheet, row) {
  var excludedStatuses = ["Abandoned", "Blocked", "On Hold", "Skipped", "In Progress", "Done"];
  var column5Value = sheet.getRange(row, 5).getValue()?.toString().trim();

  if (excludedStatuses.includes(column5Value)) return;

  var beyondOffsetRange = sheet.getRange(row, COLUMN_OFFSET + 1, 1, sheet.getLastColumn() - COLUMN_OFFSET);
  var beyondOffsetValues = beyondOffsetRange.getValues()[0];

  for (var i = 0; i < beyondOffsetValues.length; i++) {
    if (beyondOffsetValues[i] > 0) return;
  }

  var dropdownCell = sheet.getRange(row, DROPDOWN_COLUMN);
  var validation = dropdownCell.getDataValidation();
  if (validation == null) return;

  if (column5Value === "") {
    dropdownCell.setValue('-');
  } else {
    dropdownCell.setValue('Not Scheduled');
  }
}

// ------------------------------------
// Insert
// ------------------------------------

function insertTasks() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt('Insert Tasks', 'Enter number of tasks to insert:', ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK) return;

  const num = parseInt(response.getResponseText(), 10);
  if (isNaN(num) || num <= 0) {
    ui.alert('Please enter a valid positive number.');
    return;
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const range = sheet.getActiveRange();
  const row = range.getRow();
  const templateRange = sheet.getRange(TEMPLATE_ROW, 1, 1, sheet.getLastColumn());

  sheet.insertRowsAfter(row, num);
  const newRowsRange = sheet.getRange(row + 1, 1, num, sheet.getLastColumn());
  templateRange.copyTo(newRowsRange, { contentsOnly: false });
}

function insertNewProject() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();
  var row = range.getRow();

  // Insert three new rows below the selected row
  sheet.insertRowsAfter(row, 3);

  // Copy each template row to the newly inserted rows
  for (var i = 0; i < TEMPLATE_ROWS.length; i++) {
    var templateRow = TEMPLATE_ROWS[i];
    var templateRange = sheet.getRange(templateRow, 1, 1, sheet.getLastColumn());
    var newRowRange = sheet.getRange(row + 1 + i, 1, 1, sheet.getLastColumn());
    templateRange.copyTo(newRowRange, { contentsOnly: false });
  }
}

function getStoredRange() {
  return PropertiesService.getScriptProperties().getProperty('storedRange');
}

function setStoredRange(range) {
  PropertiesService.getScriptProperties().setProperty('storedRange', range);
}

function captureSelectedRange() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();

  if (range) {
    var rangeA1Notation = range.getA1Notation();
    setStoredRange(rangeA1Notation);
    Logger.log("Selected Range: " + rangeA1Notation);
    SpreadsheetApp.getUi().alert("Captured Range: " + rangeA1Notation);
  } else {
    SpreadsheetApp.getUi().alert('No range selected. Please select a range of cells to capture.');
  }
}

function addTotalFunction() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();

  if (range.getNumRows() == 1 && range.getNumColumns() == 1) {
    var storedRange = getStoredRange();
    if (storedRange) {
      range.setFormula('=IFERROR(ROUND(SUM(' + storedRange + '), 2), 0)');
      range.setFontWeight('bold');
    } else {
      SpreadsheetApp.getUi().alert('No range captured. Please capture a range first.');
    }
  } else {
    SpreadsheetApp.getUi().alert('Please select a single cell.');
  }
}

function addArchiveHeader(color) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const activeRange = sheet.getActiveRange();
  const selectedRow = activeRange.getRow();
  const newHeaderRange = sheet.getRange(selectedRow, 1, 1, NUM_CELLS_TO_COLOR);
  newHeaderRange.setBackgrounds([[color, color, color, color, color, color, color]]);
}

function addDarkArchiveHeader() {
  addArchiveHeader('#dce8d6');
}

function addLightArchiveHeader() {
  addArchiveHeader('#f1f7f1');
}

// ------------------------------------
// Archive
// ------------------------------------

function deleteRows() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();
  var data = range.getValues();
  var rowsToDelete = [];

  for (var i = 0; i < data.length; i++) {
    var row = range.getRow() + i;
    var dropdownValue = sheet.getRange(row, DROPDOWN_COLUMN).getValue();

    if (dropdownValue === "Skipped" || dropdownValue === "Abandoned") {
      sheet.getRange(row, 7).setValue("-");
    }

    if (
      dropdownValue === "Scheduled" ||
      dropdownValue === "Not Scheduled" ||
      dropdownValue === "Blocked" ||
      dropdownValue === "On Hold" ||
      dropdownValue === "Special"
    ) {
      rowsToDelete.push(row);
    }
  }

  for (var j = rowsToDelete.length - 1; j >= 0; j--) {
    sheet.deleteRow(rowsToDelete[j]);
  }

  SpreadsheetApp.getUi().alert('Rows with "Scheduled", "Not Scheduled", "Blocked", or "On Hold" have been deleted.');
}

function deleteRowsDoneOrAbandoned() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();
  var data = range.getValues();
  var rowsToDelete = [];

  for (var i = 0; i < data.length; i++) {
    var row = range.getRow() + i;
    var dropdownValue = sheet.getRange(row, DROPDOWN_COLUMN).getValue();
    var isRecurring = sheet.getRange(row, RECURRING_COLUMN).getValue();

    if (dropdownValue === "Done" || dropdownValue === "Abandoned") {
      if (isRecurring === true) {
        var clearStartColumn = START_COLUMN_PASTE_CHECK - 1; // Column H
        var numColumnsToClear = sheet.getLastColumn() - clearStartColumn + 1;
        sheet.getRange(row, clearStartColumn, 1, numColumnsToClear).clearContent();
        sheet.getRange(row, DROPDOWN_COLUMN).setValue('Not Scheduled');
        sheet.getRange(row, CHECKBOX_COLUMN).setValue(false);
      } else {
        rowsToDelete.push(row);
      }
    }
  }

  for (var j = rowsToDelete.length - 1; j >= 0; j--) {
    sheet.deleteRow(rowsToDelete[j]);
  }

  SpreadsheetApp.getUi().alert('Rows have been deleted or cleared.');
}

// ------------------------------------
// Hide
// ------------------------------------

function hideSelectedWeek() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();
  var startColumn = range.getColumn();
  sheet.hideColumns(startColumn, NUM_COLUMNS_HIDE);
}

function unhidePreviousWeek() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();
  var startColumn = range.getColumn();
  var startUnhideColumn = Math.max(1, startColumn - NUM_COLUMNS_HIDE);
  sheet.showColumns(startUnhideColumn, NUM_COLUMNS_HIDE);
}

// Group selected rows using the Google Sheets API
function groupSelectedRows() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getActiveRange();
  var startRow = range.getRow();
  var numRows = range.getNumRows();

  var requests = [{
    addDimensionGroup: {
      range: {
        sheetId: sheet.getSheetId(),
        dimension: "ROWS",
        startIndex: startRow - 1,
        endIndex: startRow - 1 + numRows
      }
    }
  }];

  var request = { requests: requests };
  Sheets.Spreadsheets.batchUpdate(request, SpreadsheetApp.getActiveSpreadsheet().getId());
}

function findProjectHeaderRow(sheet, row) {
  for (var r = row; r > 0; r--) {
    if ((sheet.getRange(r, HEADER_COLOR_COLUMN).getBackground() || '').toLowerCase() === HEADER_COLOR) {
      return r;
    }
  }
  return null;
}

function computeProjectSum(sheet, headerRow, useCache) {
  if (useCache === undefined) useCache = true;
  var cache = CacheService.getUserCache();
  var key = sheet.getSheetId() + ':' + headerRow;
  if (useCache) {
    var cached = cache.get(key);
    if (cached !== null) return parseFloat(cached);
  }

  var last = sheet.getLastRow();
  var bgs = sheet.getRange(headerRow + 1, HEADER_COLOR_COLUMN, last - headerRow, 1).getBackgrounds();
  var endExclusive = last + 1;
  for (var i = 0; i < bgs.length; i++) {
    if ((bgs[i][0] || '').toLowerCase() === HEADER_COLOR) {
      endExclusive = headerRow + 1 + i;
      break;
    }
  }

  var rowCount = endExclusive - headerRow - 1;
  if (rowCount <= 0) {
    cache.put(key, '0', CACHE_EXPIRATION);
    return 0;
  }

  var statusVals = sheet.getRange(headerRow + 1, STATUS_COLUMN, rowCount, 1).getValues();
  var hourVals = sheet.getRange(headerRow + 1, HOURS_COLUMN, rowCount, 1).getValues();
  var allowed = { scheduled: true, done: true };
  var sum = 0;
  for (var j = 0; j < rowCount; j++) {
    var st = String(statusVals[j][0] || '').toLowerCase().trim();
    if (allowed[st]) {
      var h = parseFloat(hourVals[j][0]);
      if (!isNaN(h)) sum += h;
    }
  }
  sum = Math.round(sum * 100) / 100;
  if (useCache) cache.put(key, String(sum), CACHE_EXPIRATION);
  return sum;
}

function updateProjectTotal(sheet, row) {
  var headerRow = findProjectHeaderRow(sheet, row);
  if (!headerRow) return;

  var cache = CacheService.getUserCache();
  cache.remove(sheet.getSheetId() + ':' + headerRow);

  var total = computeProjectSum(sheet, headerRow);
  sheet.getRange(headerRow, HOURS_COLUMN).setValue(total); // write numeric total to H

  // NOTE: no automatic coloring here; use the manual menu action instead.
}

// Recompute totals for all project headers.
function recomputeAllTotals() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(PROJECTS_SHEET);
  if (!sheet) return;

  const last = sheet.getLastRow();
  for (let r = 1; r <= last; r++) {
    if ((sheet.getRange(r, HEADER_COLOR_COLUMN).getBackground() || '').toLowerCase() === HEADER_COLOR) {
      updateProjectTotal(sheet, r);
    }
  }
}

/**
 * Sum hours under a colored project header until the next header of the same color.
 * Counts only rows whose Status is "scheduled" or "done" (case-insensitive).
 *
 * Use in the HEADER's hours cell:
 *   =ProjectHoursAt(ROW(), COLUMN())
 */
function ProjectHoursAt(headerRow, headerCol, statusColRange, hoursColRange, headerHex, headerColorCol) {
  try {
    var sh = SpreadsheetApp.getActiveSheet();
    var last = sh.getLastRow();
    if (!headerRow || !headerCol || headerRow > last) return 0;

    var targetHex = (headerHex || HEADER_COLOR).toLowerCase();
    var letterToCol = function (L) {
      var c = 0;
      for (var i = 0; i < L.length; i++) c = c * 26 + (L.charCodeAt(i) - 64);
      return c;
    };
    var colorCol = letterToCol((headerColorCol || 'A').toUpperCase());
    if ((sh.getRange(headerRow, colorCol).getBackground() || '').toLowerCase() !== targetHex) return 0;

    return computeProjectSum(sh, headerRow, false);
  } catch (err) {
    return 0;
  }
}

// ------------------------------------
// ðŸŽ¨ Manual Week-over-Week Colorer
// ------------------------------------

// Find the "Archive" anchor row (by text in column A).
function WOW_getArchiveAnchorRow_(sheet) {
  const last = sheet.getLastRow();
  const want = String(ARCHIVE_ANCHOR_TEXT || 'Archive').toLowerCase();
  for (let r = 1; r <= last; r++) {
    const aText = String(sheet.getRange(r, 1).getDisplayValue() || '').trim().toLowerCase();
    if (aText === want) return r;
  }
  return null;
}

function WOW_isWeekHeaderRow_(sheet, row) {
  const v = String(sheet.getRange(row, 1).getDisplayValue() || '').trim();
  return v.startsWith(WEEK_HEADER_PREFIX || 'Year');
}

function WOW_findWeekStartAtOrAbove_(sheet, row) {
  const anchor = WOW_getArchiveAnchorRow_(sheet);
  const minRow = anchor ? anchor + 1 : HEADER_END_ROW + 1;
  for (let r = row; r >= minRow; r--) {
    if (WOW_isWeekHeaderRow_(sheet, r)) return r;
  }
  return null;
}

function WOW_findPreviousWeekStart_(sheet, currentStart) {
  const anchor = WOW_getArchiveAnchorRow_(sheet);
  const minRow = anchor ? anchor + 1 : HEADER_END_ROW + 1;
  for (let r = currentStart - 1; r >= minRow; r--) {
    if (WOW_isWeekHeaderRow_(sheet, r)) return r;
  }
  return null;
}

function WOW_findWeekEnd_(sheet, start) {
  const last = sheet.getLastRow();
  for (let r = start + 1; r <= last; r++) {
    if (WOW_isWeekHeaderRow_(sheet, r)) return r - 1;
  }
  return last;
}

function WOW_isProjectHeaderRow_(sheet, row) {
  const wantHex = (HEADER_COLOR || '#d5a6bd').toLowerCase();
  const bg = String(sheet.getRange(row, HEADER_COLOR_COLUMN).getBackground() || '').toLowerCase();
  return bg === wantHex;
}

function WOW_findProjectRowInWeekByName_(sheet, start, end, name) {
  const wantHex = (HEADER_COLOR || '#d5a6bd').toLowerCase();
  for (let r = start + 1; r <= end; r++) {
    const bg = String(sheet.getRange(r, HEADER_COLOR_COLUMN).getBackground() || '').toLowerCase();
    if (bg !== wantHex) continue;
    const nm = String(sheet.getRange(r, 1).getDisplayValue() || '').trim();
    if (nm === name) return r;
  }
  return null;
}

/**
 * MENU ACTION: Color Selected G cells vs the same project in the previous week.
 * - Looks strictly below the "Archive" anchor.
 * - Compares H (numeric totals) current vs previous; colors G green/red.
 */
function colorSelectedTotalsWoW() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  if (sheet.getName() !== PROJECTS_SHEET) {
    ui.alert(`Run this on the "${PROJECTS_SHEET}" sheet.`);
    return;
  }

  const sel = sheet.getActiveRange();
  if (!sel) { ui.alert('Select one or more cells in column G.'); return; }

  // Gather only column-G rows from the selection
  const rows = new Set();
  const r0 = sel.getRow(), c0 = sel.getColumn();
  const nr = sel.getNumRows(), nc = sel.getNumColumns();
  for (let dr = 0; dr < nr; dr++) {
    for (let dc = 0; dc < nc; dc++) {
      const col = c0 + dc;
      if (col === 7) rows.add(r0 + dr); // only G
    }
  }
  if (rows.size === 0) { ui.alert('Please select cells in column G.'); return; }

  let colored = 0, skipped = 0;
  rows.forEach((row) => {
    // Only act on pink project header rows
    if (!WOW_isProjectHeaderRow_(sheet, row)) { skipped++; return; }

    // Find week boundaries
    const thisStart = WOW_findWeekStartAtOrAbove_(sheet, row);
    if (!thisStart) { skipped++; return; }
    const prevStart = WOW_findPreviousWeekStart_(sheet, thisStart);
    if (!prevStart) { skipped++; return; }
    const prevEnd = WOW_findWeekEnd_(sheet, prevStart);

    // Match by project name
    const name = String(sheet.getRange(row, 1).getDisplayValue() || '').trim();
    const prevRow = WOW_findProjectRowInWeekByName_(sheet, prevStart, prevEnd, name);
    if (!prevRow) { skipped++; return; }

    // Compare H (numeric totals)
    const curr = Number(sheet.getRange(row, HOURS_COLUMN).getValue());
    const prev = Number(sheet.getRange(prevRow, HOURS_COLUMN).getValue());
    if (isNaN(curr) || isNaN(prev)) { skipped++; return; }

    sheet.getRange(row, 7).setFontColor(curr >= prev ? WOW_GREEN : WOW_RED); // color G
    colored++;
  });

  ui.alert(`Colored ${colored} cell(s); skipped ${skipped}.`);
}

/** MENU ACTION: Clear font color on selected G cells */
function clearSelectedFontColor() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const sel = sheet.getActiveRange();
  if (!sel) return;

  const r0 = sel.getRow(), c0 = sel.getColumn();
  const nr = sel.getNumRows(), nc = sel.getNumColumns();
  for (let dr = 0; dr < nr; dr++) {
    for (let dc = 0; dc < nc; dc++) {
      if (c0 + dc === 7) sheet.getRange(r0 + dr, 7).setFontColor(null);
    }
  }
}
